{"version":3,"sources":["../src/conf.js"],"names":["fs","require","os","inquirer","CONFIG","homedir","console","log","QUESTIONS","type","name","message","choices","canditates","findProfiles","push","when","answer","chrome_profile_path","validate","value","accessSync","e","default","findOneTabExtensionID","undefined","loadConfig","requests","resolve","reject","config","JSON","parse","readFileSync","code","qs","forEach","concat","prompt","then","result","answers","length","saveConfig","info","PROFILE_DIRS","dirs","platform","profiles","statSync","dir","isDirectory","profileDir","extsDir","id","readdirSync","extDir","ext","toString","versionDir","version","file","writeFileSync","load","save"],"mappings":"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","file":"conf.js","sourcesContent":["const fs = require(\"fs\");\nconst os = require(\"os\");\n\nconst inquirer = require(\"inquirer\");\n\nconst CONFIG = os.homedir() + \"/.onetab-sync.json\"\n\nconsole.log('CONFIG - ', CONFIG)\n\nconst QUESTIONS = {\n    \"chrome_profile_path\": [{\n        type: \"list\",\n        name: \"chrome_profile_path\",\n        message: \"Select the path to user profile directory of Chrome \",\n        choices: () => {\n            let canditates = findProfiles();\n            canditates.push(\"custom\");\n            return canditates;\n        },\n    }, {\n        type: \"input\",\n        name: \"chrome_profile_path\",\n        when: (answer) => answer && answer.chrome_profile_path === \"custom\",\n        message: \"Please input\",\n        validate: (value) => {\n            try {\n                fs.accessSync(value);\n                return true;\n            } catch (e) {\n                return false;\n            }\n        },\n    }],\n    \"onetab_ext_id\": [{\n        type: \"input\",\n        name: \"onetab_ext_id\",\n        default: (answer) => {\n            return answer.chrome_profile_path ? findOneTabExtensionID(answer.chrome_profile_path) : undefined\n        },\n        message: \"Input the extension ID of OneTab.\",\n        validate: (value) => !!value,\n    }],\n    \"gist_token\": [{\n        type: \"input\",\n        name: \"gist_token\",\n        message: \"Input your gist access token.\",\n        validate: (value) => !!value,\n    }],\n    \"gist_id\": [{\n        type: \"input\",\n        name: \"gist_id\",\n        message: \"Input the gist ID which OneTab data is stored.\",\n        validate: (value) => !!value,\n    }],\n};\n\nconst loadConfig = (requests) => {\n    return new Promise((resolve, reject) => {\n        let config = {}\n        try {\n            config = JSON.parse(fs.readFileSync(CONFIG));\n        } catch(e) {\n            if (e.code !== \"ENOENT\") {\n                reject(e);\n            }\n        }\n\n        let qs = []\n        requests.forEach(name => {\n            if (!config[name]) {\n                qs = qs.concat(QUESTIONS[name]);\n            }\n        });\n        inquirer.prompt(qs).then(answers => {\n            let result = Object.assign(config, answers);\n            if (Object.keys(answers).length > 0) {\n                saveConfig(result);\n                console.info(\"configuration is saved in \" + CONFIG);\n            }\n            resolve(result);\n        });\n    });\n};\n\nconst PROFILE_DIRS = {\n    \"win32\": [\n        os.homedir() + \"\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\User Data\\\\Default\",\n        os.homedir() + \"\\\\AppData\\\\Local\\\\Google\\\\Chrome SxS\\\\User Data\\\\Default\",\n        os.homedir() + \"\\\\AppData\\\\Local\\\\Chromium\\\\User Data\\\\Default\",\n        os.homedir() + \"\\\\AppData\\\\Local\\\\Vivaldi\\\\User Data\\\\Default\",\n    ],\n    \"linux\": [\n        os.homedir() + \"/.config/google-chrome/Default\",\n        os.homedir() + \"/.config/google-chrome-beta/Default\",\n        os.homedir() + \"/.config/google-chrome-unstable/Default\",\n        os.homedir() + \"/.config/chromium/Default\",\n        os.homedir() + \"/.config/vivaldi/Default\",\n    ],\n    \"darwin\": [\n        os.homedir() + \"/Library/Application Support/Google/Chrome/Default\",\n        os.homedir() + \"~/Library/Application Support/Google/Chrome Canary/Default\",\n        os.homedir() + \"~/Library/Application Support/Chromium/Default\",\n        os.homedir() + \"~/Library/Application Support/Vivaldi/Default\",\n    ]\n}\nconst findProfiles = () => {\n    const dirs = PROFILE_DIRS[os.platform()];\n    let profiles = [];\n    if (dirs) {\n        dirs.forEach(dir => {\n            try {\n                if (fs.statSync(dir).isDirectory()) {\n                    profiles.push(dir);\n                }\n            } catch (e) { /* skip */ }\n        })\n    }\n    return profiles;\n};\n\nconst findOneTabExtensionID = (profileDir) => {\n    let extsDir = profileDir + \"/Extensions\";\n    let id = undefined;\n    fs.readdirSync(extsDir).forEach(ext => {\n        try {\n            let extDir = extsDir + \"/\" + ext.toString();\n            fs.readdirSync(extDir).forEach(version => {\n                let versionDir = extDir + \"/\" + version.toString();\n                try {\n                    fs.readdirSync(versionDir).forEach(file => {\n                        if (file.toString() === \"onetab.html\") {\n                            id = ext.toString();\n                        }\n                    })\n                } catch (e) { /* skip */ }\n            })\n        } catch (e) { /* skip */ }\n    });\n    return id;\n};\n\nconst saveConfig = (value) => {\n    fs.writeFileSync(CONFIG, JSON.stringify(value));\n};\n\nexport default {\n    load: loadConfig,\n    save: saveConfig,\n};\n"]}