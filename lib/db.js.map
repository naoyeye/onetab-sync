{"version":3,"sources":["../src/db.js"],"names":["levelup","require","leveldown","sqlite3","verbose","fs","openOneTabDB","config","openSqliteDb","openLevelDb","reject","pathForTest","path","chrome_profile_path","createIfMissing","db","resolve","resolved","createKeyStream","on","data","key","toString","startsWith","onetab_ext_id","endsWith","createLevelDBInterface","Error","message","get","value","slice","put","buf","Buffer","concat","from","close","accessSync","e","Database","serialize","err","row","createSqliteDBInterface","run","res"],"mappings":"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","file":"db.js","sourcesContent":["const levelup = require(\"levelup\");\nconst leveldown = require(\"leveldown\");\nconst sqlite3 = require(\"sqlite3\").verbose();\nconst fs = require(\"fs\");\n\nexport const openOneTabDB = async (config) => {\n    try {\n        return await openSqliteDb(config);\n    } catch (_) { try {\n        return await openLevelDb(config);\n    } catch(e) {\n        return Promise.reject(e);\n    } }\n}\n\nconst openLevelDb = async (config, pathForTest) => {\n    let path;\n    if (!pathForTest) {\n        path = config.chrome_profile_path + \"/Local Storage/leveldb\";\n    } else {\n        path = pathForTest;\n    }\n\n    try {\n        let db = await levelup(leveldown(path), {createIfMissing: false});\n        return new Promise((resolve, reject) => {\n            let resolved = false;\n            db.createKeyStream().on(\"data\", (data) => {\n                let key = data.toString();\n                if(key.startsWith(\"_chrome-extension://\" + config.onetab_ext_id) && key.endsWith(\"state\")) {\n                    resolve(createLevelDBInterface(db, key));\n                    resolved = true;\n                }\n            }).on(\"end\", () => {\n                if (!resolved) {\n                    reject(new Error(\"one tab data is not found.\"));\n                }\n            });\n        })\n    } catch (err) {\n        return Promise.reject(\"can't open chrome localstorage db. If browser is running, please quit.\" + err.message);\n    }\n};\n\nconst createLevelDBInterface = (db, key) => {\n    return {\n        get: async () => {\n            try {\n                let value = await db.get(key);\n                return value.slice(1).toString('ucs2');\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        },\n        put: async (value) => {\n            try {\n                let buf =  Buffer.concat([Buffer.from([0x00]), new Buffer(value, \"ucs2\")]);\n                return await db.put(key, buf);\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        },\n        close: async () => {\n            return db.close();\n        }\n    }\n};\n\nconst openSqliteDb = (config, pathForTest) => {\n    let path;\n    if (!pathForTest) {\n        path = config.chrome_profile_path + \"/Local Storage/chrome-extension_\" + config.onetab_ext_id + \"_0.localstorage\";\n    } else {\n        path = pathForTest;\n    }\n\n    return new Promise((resolve, reject) => {\n        try {\n            fs.accessSync(path);\n        } catch (e) {\n            reject (e);\n            return;\n        }\n\n        let db = new sqlite3.Database(path);\n        db.serialize(() => {\n            db.get(\"SELECT key,value FROM ItemTable WHERE key = ?\", \"state\", (err, row) => {\n                if (err) {\n                    reject(err)\n                } else {\n                    resolve(createSqliteDBInterface(db, row.key));\n                }\n            })\n        })\n    });\n}\n\nconst createSqliteDBInterface = (db, key) => {\n    return {\n        get: () => new Promise((resolve, reject) => {\n            db.get(\"SELECT key,value FROM ItemTable WHERE key = '\" + key +  \"'\", (err, row) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(row.value.toString(\"ucs2\"));\n                }\n            })\n        }),\n        put: (value) => new Promise((resolve, reject) => {\n            db.run(\"UPDATE ItemTable SET value = ? WHERE key = ?\", new Buffer(value, \"ucs2\"), key, (err, res) => {\n                if (err) {\n                    reject(err)\n                } else {\n                    resolve();\n                }\n            })\n        }),\n        close: () => {\n            return new Promise((resolve, reject) => {\n                db.close((err) => {\n                    if (err) reject(err);\n                    else resolve();\n                })\n            })\n        }\n    }\n};\n\nexport default openOneTabDB;\n"]}