{"version":3,"sources":["../src/db.js"],"names":["levelup","require","leveldown","level","sqlite3","verbose","fs","encoding","encode","openOneTabDB","config","openSqliteDb","openLevelDb","ldb","console","log","reject","pathForTest","path","chrome_profile_path","createIfMissing","db","resolve","resolved","ks","createReadStream","on","data","key","startsWith","onetab_ext_id","value","toString","endsWith","obj","createLevelDBInterface","Error","message","chkstrlen","str","strlen","i","length","charCodeAt","get","valueEncoding","put","buf","Buffer","concat","from","close","accessSync","e","Database","serialize","err","row","createSqliteDBInterface","run","res"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,YAAYD,QAAQ,WAAR,CAAlB;AACA,IAAME,QAAQF,QAAQ,OAAR,CAAd;AACA,IAAMG,UAAUH,QAAQ,SAAR,EAAmBI,OAAnB,EAAhB;AACA,IAAMC,KAAKL,QAAQ,IAAR,CAAX;AACA,IAAMM,WAAWN,QAAQ,UAAR,CAAjB;AACA,IAAMO,SAASP,QAAQ,eAAR,CAAf;;AAEO,IAAMQ;AAAA,wFAAe,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEPC,aAAaD,MAAb,CAFO;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAKEE,YAAYF,MAAZ,CALF;;AAAA;AAKVG,2BALU;;AAMhBC,gCAAQC,GAAR,CAAY,QAAZ,EAAsBF,GAAtB;AANgB,yDAOTA,GAPS;;AAAA;AAAA;AAAA;;AAShBC,gCAAQC,GAAR,CAAY,UAAZ;AATgB,yDAUT,kBAAQC,MAAR,aAVS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAeP,IAAMJ;AAAA,yFAAc,kBAAOF,MAAP,EAAeO,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,4BADY;;AAEhB,4BAAI,CAACD,WAAL,EAAkB;AACdC,mCAAOR,OAAOS,mBAAP,GAA6B,wBAApC;AACH,yBAFD,MAEO;AACHD,mCAAOD,WAAP;AACH;;AAEDH,gCAAQC,GAAR,CAAY,iBAAZ;;AARgB;AAAA;AAAA,+BAWGf,QAAQQ,OAAON,UAAUgB,IAAV,CAAP,CAAR,EAAiC;AAC5CE,6CAAiB;AACjB;AAF4C,yBAAjC,CAXH;;AAAA;AAWRC,0BAXQ;;AAeZ;AACAP,gCAAQC,GAAR,CAAY,iBAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArCY,0DAuCL,sBAAY,UAACO,OAAD,EAAUN,MAAV,EAAqB;AACpC,gCAAIO,WAAW,KAAf;AACA,gCAAIC,KAAKH,GAAGI,gBAAH,EAAT;AACAD,+BAAGE,EAAH,CAAM,MAAN,EAAc,UAACC,IAAD,EAAU;AACpB,oCAAI,CAACA,KAAKC,GAAL,CAASC,UAAT,CAAoB,yBAAyBnB,OAAOoB,aAApD,CAAD,IAAuE,CAACH,KAAKC,GAAL,CAASC,UAAT,CAAoB,UAApB,CAAxE,IAA2G,CAACF,KAAKC,GAAL,CAASC,UAAT,CAAoB,kBAApB,CAAhH,EAAyJ;AACrJf,4CAAQC,GAAR,CAAYY,KAAKC,GAAjB,EAAsB,KAAtB,EAA6BD,KAAKI,KAAL,CAAWC,QAAX,EAA7B;AACAlB,4CAAQC,GAAR,CAAY,oBAAZ;AACH;AACD,oCAAIa,MAAMD,KAAKC,GAAL,CAASI,QAAT,EAAV;AACA,oCAAIJ,OAAOA,IAAIC,UAAJ,CAAe,yBAAyBnB,OAAOoB,aAA/C,CAAP,IAAwEF,IAAIK,QAAJ,CAAa,OAAb,CAA5E,EAAmG;AAC/F,wCAAMC,MAAMC,uBAAuBd,EAAvB,EAA2BO,GAA3B,CAAZ;AACAN,4CAAQY,GAAR;AACAX,+CAAW,IAAX;AACH;AACJ,6BAXD,EAYCG,EAZD,CAYI,KAZJ,EAYW,YAAY;AACnBZ,wCAAQC,GAAR,CAAY,cAAZ;AACA,oCAAI,CAACQ,QAAL,EAAe;AACXP,2CAAO,IAAIoB,KAAJ,CAAU,4BAAV,CAAP;AACH;AACJ,6BAjBD;AAkBH,yBArBM,CAvCK;;AAAA;AAAA;AAAA;AAAA,0DA8DL,kBAAQpB,MAAR,CAAe,2EAA2E,aAAIqB,OAA9F,CA9DK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAkEA,SAASC,SAAT,CAAmBC,GAAnB,EAAuB;AACnB,QAAIC,SAAS,CAAb;AACA,SAAI,IAAIC,IAAI,CAAZ,EAAcA,IAAIF,IAAIG,MAAtB,EAA8BD,GAA9B,EAAkC;AAChC,YAAGF,IAAII,UAAJ,CAAeF,CAAf,IAAoB,GAAvB,EAA4B;AAC1BD,sBAAU,CAAV,CADF,KAGEA;AACH;AACD,WAASA,MAAT;AACH;;AAED,IAAML,yBAAyB,SAAzBA,sBAAyB,CAACd,EAAD,EAAKO,GAAL,EAAa;AACxCd,YAAQC,GAAR,CAAY,4BAAZ;AACA,WAAO;AACH6B;AAAA,iGAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAYqBvB,GAAGuB,GAAH,CAAOhB,GAAP,EAAY,EAAEiB,eAAe,MAAjB,EAAZ,CAZrB;;AAAA;AAYOd,qCAZP;;AAaG;;AAEA;AACA;;AAEAjB,wCAAQC,GAAR,CAAY,iBAAZ,SAAsCgB,KAAtC,uDAAsCA,KAAtC;AACA;AACA;AACI;AACA;AACJ;;AAvBH,kEAyBUA,KAzBV;;AAAA;AAAA;AAAA;AAAA,kEA2BU,kBAAQf,MAAR,cA3BV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAL;;AAAA;AAAA;AAAA;;AAAA;AAAA,WADG;AA+BH8B;AAAA,iGAAK,kBAAOf,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEOgB,mCAFP,GAEaC,OAAOC,MAAP,CAAc,CAACD,OAAOE,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAD,EAAsB,IAAIF,OAAOE,IAAX,CAAgBnB,KAAhB,EAAuB,OAAvB,CAAtB,CAAd,CAFb;AAAA;AAAA,uCAGgBV,GAAGyB,GAAH,CAAOlB,GAAP,EAAYmB,GAAZ,CAHhB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kEAKU,kBAAQ/B,MAAR,cALV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAL;;AAAA;AAAA;AAAA;;AAAA;AAAA,WA/BG;AAuCHmC;AAAA,iGAAO;AAAA;AAAA;AAAA;AAAA;AAAA;;AAECrC,wCAAQC,GAAR,CAAY,MAAZ;AAFD,kEAGQM,GAAG8B,KAAH,EAHR;;AAAA;AAAA;AAAA;AAAA,kEAKQ,kBAAQnC,MAAR,cALR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAvCG,KAAP;AAgDH,CAlDD;;AAoDA,IAAML,eAAe,SAAfA,YAAe,CAACD,MAAD,EAASO,WAAT,EAAyB;AAC1CH,YAAQC,GAAR,CAAY,qBAAZ;AACA,QAAIG,aAAJ;AACA,QAAI,CAACD,WAAL,EAAkB;AACdC,eAAOR,OAAOS,mBAAP,GAA6B,kCAA7B,GAAkET,OAAOoB,aAAzE,GAAyF,iBAAhG;AACH,KAFD,MAEO;AACHZ,eAAOD,WAAP;AACH;;AAED,WAAO,sBAAY,UAACK,OAAD,EAAUN,MAAV,EAAqB;AACpCF,gBAAQC,GAAR,CAAY,SAAZ,EAAuBG,IAAvB;AACA,YAAI;AACAJ,oBAAQC,GAAR,CAAY,iBAAZ;AACAT,eAAG8C,UAAH,CAAclC,IAAd;AACH,SAHD,CAGE,OAAOmC,CAAP,EAAU;AACRvC,oBAAQC,GAAR,CAAY,iBAAZ;AACAC,mBAAQqC,CAAR;AACA;AACH;;AAED,YAAIhC,KAAK,IAAIjB,QAAQkD,QAAZ,CAAqBpC,IAArB,CAAT;;AAEAJ,gBAAQC,GAAR,CAAY,iBAAZ;;AAEAM,WAAGkC,SAAH,CAAa,YAAM;AACflC,eAAGuB,GAAH,CAAO,+CAAP,EAAwD,OAAxD,EAAiE,UAACY,GAAD,EAAMC,GAAN,EAAc;AAC3E,oBAAID,GAAJ,EAAS;AACLxC,2BAAOwC,GAAP;AACH,iBAFD,MAEO;AACH1C,4BAAQC,GAAR,CAAY,0BAAZ;AACAO,4BAAQoC,wBAAwBrC,EAAxB,EAA4BoC,IAAI7B,GAAhC,CAAR;AACH;AACJ,aAPD;AAQH,SATD;AAUH,KAzBM,CAAP;AA0BH,CAnCD;;AAqCA,IAAM8B,0BAA0B,SAA1BA,uBAA0B,CAACrC,EAAD,EAAKO,GAAL,EAAa;AACzC,WAAO;AACHgB,aAAK;AAAA,mBAAM,sBAAY,UAACtB,OAAD,EAAUN,MAAV,EAAqB;AACxCK,mBAAGuB,GAAH,CAAO,kDAAkDhB,GAAlD,GAAyD,GAAhE,EAAqE,UAAC4B,GAAD,EAAMC,GAAN,EAAc;AAC/E,wBAAID,GAAJ,EAAS;AACLxC,+BAAOwC,GAAP;AACH,qBAFD,MAEO;AACHlC,gCAAQmC,IAAI1B,KAAJ,CAAUC,QAAV,CAAmB,OAAnB,CAAR;AACH;AACJ,iBAND;AAOH,aARU,CAAN;AAAA,SADF;AAUHc,aAAK,aAACf,KAAD;AAAA,mBAAW,sBAAY,UAACT,OAAD,EAAUN,MAAV,EAAqB;AAC7CK,mBAAGsC,GAAH,CAAO,8CAAP,EAAuD,IAAIX,OAAOE,IAAX,CAAgBnB,KAAhB,EAAuB,OAAvB,CAAvD,EAAwFH,GAAxF,EAA6F,UAAC4B,GAAD,EAAMI,GAAN,EAAc;AACvG,wBAAIJ,GAAJ,EAAS;AACLxC,+BAAOwC,GAAP;AACH,qBAFD,MAEO;AACHlC;AACH;AACJ,iBAND;AAOH,aARe,CAAX;AAAA,SAVF;AAmBH6B,eAAO,iBAAM;AACT,mBAAO,sBAAY,UAAC7B,OAAD,EAAUN,MAAV,EAAqB;AACpCK,mBAAG8B,KAAH,CAAS,UAACK,GAAD,EAAS;AACd,wBAAIA,GAAJ,EAASxC,OAAOwC,GAAP,EAAT,KACKlC;AACR,iBAHD;AAIH,aALM,CAAP;AAMH;AA1BE,KAAP;AA4BH,CA7BD;;kBA+Beb,Y","file":"db.js","sourcesContent":["const levelup = require(\"levelup\");\nconst leveldown = require(\"leveldown\");\nconst level = require('level');\nconst sqlite3 = require(\"sqlite3\").verbose();\nconst fs = require(\"fs\");\nconst encoding = require('encoding');\nconst encode = require('encoding-down')\n\nexport const openOneTabDB = async (config) => {\n    try {\n        return await openSqliteDb(config);\n    } catch (_) {\n        try {\n            const ldb = await openLevelDb(config);\n            console.log('ldb = ', ldb)\n            return ldb;\n        } catch(e) {\n            console.log('出错了 e = ', e)\n            return Promise.reject(e);\n        }\n    }\n}\n\nconst openLevelDb = async (config, pathForTest) => {\n    let path;\n    if (!pathForTest) {\n        path = config.chrome_profile_path + \"/Local Storage/leveldb\";\n    } else {\n        path = pathForTest;\n    }\n\n    console.log('openLevelDb - 1')\n\n    try {\n        let db = await levelup(encode(leveldown(path)), {\n            createIfMissing: false,\n            // valueEncoding: 'json'\n        });\n        // let db = await level(path)\n        console.log('openLevelDb - 2')\n        // return new Promise((resolve, reject) => {\n        //     let resolved = false;\n        //     let ks = db.createKeyStream()\n        //     ks.setEncoding('utf-8')\n        //     ks.on(\"data\", (data) => {\n        //         let key = data.toString();\n        //         if (key && key.startsWith(\"_chrome-extension://\" + config.onetab_ext_id) && key.endsWith(\"state\")) {\n        //             console.log('openLevelDb - 5')\n        //             const obj = createLevelDBInterface(db, key)\n        //             console.log('obj - ', obj)\n        //             resolve(obj);\n        //             resolved = true;\n        //         }\n        //     })\n        //     ks.on(\"end\", () => {\n        //         console.log('end!')\n        //         if (!resolved) {\n        //             reject(new Error(\"one tab data is not found.\"));\n        //         }\n        //     });\n        // })\n\n        return new Promise((resolve, reject) => {\n            let resolved = false;\n            let ks = db.createReadStream()\n            ks.on('data', (data) => {\n                if (!data.key.startsWith(\"_chrome-extension://\" + config.onetab_ext_id) && !data.key.startsWith('META:htt') && !data.key.startsWith(\"_chrome-devtools\")) {\n                    console.log(data.key, ' = ', data.value.toString())\n                    console.log('-=================')\n                }\n                let key = data.key.toString();\n                if (key && key.startsWith(\"_chrome-extension://\" + config.onetab_ext_id) && key.endsWith(\"state\")) {\n                    const obj = createLevelDBInterface(db, key);\n                    resolve(obj);\n                    resolved = true;\n                }\n            })\n            .on('end', function () {\n                console.log('Stream ended')\n                if (!resolved) {\n                    reject(new Error(\"one tab data is not found.\"));\n                }\n            })\n        })\n    } catch (err) {\n        return Promise.reject(\"can't open chrome localstorage db. If browser is running, please quit.\" + err.message);\n    }\n};\n\nfunction chkstrlen(str){\n　　　　var strlen = 0;\n　　　　for(var i = 0;i < str.length; i++){\n　　　　　　if(str.charCodeAt(i) > 255) //如果是汉字，则字符串长度加2\n　　　　　　　　strlen += 2;\n　　　　　　else  \n　　　　　　　　strlen++;\n　　　　}\n　　　　return   strlen;\n}\n\nconst createLevelDBInterface = (db, key) => {\n    console.log('createLevelDBInterface - 1')\n    return {\n        get: async () => {\n            try {\n                // let buf = Buffer.concat([Buffer.from([0x00]), new Buffer.from('好书影音报告 2021', \"utf8\")])\n                // await db.put(key, buf);\n\n                // let value = await db.get(key);\n                // value = encoding.convert(value.slice(1), 'utf8', 'utf8').toString();\n                // console.log(typeof value)\n                // // const dataStr = encoding.convert(value.slice(1), 'GBK', 'UCS-2').toString();\n\n                // const dataStr = '好书影音报告 2020'.toString('utf8') // value.slice(1).toString('utf8')\n\n                let value = await db.get(key, { valueEncoding: 'utf8' });\n                // value = encoding.convert(value, 'utf8', 'utf8')//.toString();\n\n                // value = encoding.convert(value.slice(572, 622), 'UTF-8', 'UCS2')\n                // value = value.slice(572, 622)\n\n                console.log('typeof value - ', typeof value)\n                // console.log('value - ', value)\n                // for (let s of value) {\n                    // console.log(s)\n                    // console.log(String.fromCodePoint(s))\n                // }\n\n                return value\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        },\n        put: async (value) => {\n            try {\n                let buf = Buffer.concat([Buffer.from([0x00]), new Buffer.from(value, \"UTF-8\")]);\n                return await db.put(key, buf);\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        },\n        close: async () => {\n            try {\n                console.log('关闭了！')\n                return db.close();\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }\n    }\n};\n\nconst openSqliteDb = (config, pathForTest) => {\n    console.log('=openSqliteDb 1 !!!')\n    let path;\n    if (!pathForTest) {\n        path = config.chrome_profile_path + \"/Local Storage/chrome-extension_\" + config.onetab_ext_id + \"_0.localstorage\";\n    } else {\n        path = pathForTest;\n    }\n\n    return new Promise((resolve, reject) => {\n        console.log('path - ', path)\n        try {\n            console.log('openSqliteDb 2!')\n            fs.accessSync(path);\n        } catch (e) {\n            console.log('openSqliteDb 3!')\n            reject (e);\n            return;\n        }\n\n        let db = new sqlite3.Database(path);\n\n        console.log('openSqliteDb 4!')\n\n        db.serialize(() => {\n            db.get(\"SELECT key,value FROM ItemTable WHERE key = ?\", \"state\", (err, row) => {\n                if (err) {\n                    reject(err)\n                } else {\n                    console.log('createSqliteDBInterface!')\n                    resolve(createSqliteDBInterface(db, row.key));\n                }\n            })\n        })\n    });\n}\n\nconst createSqliteDBInterface = (db, key) => {\n    return {\n        get: () => new Promise((resolve, reject) => {\n            db.get(\"SELECT key,value FROM ItemTable WHERE key = '\" + key +  \"'\", (err, row) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(row.value.toString(\"UTF-8\"));\n                }\n            })\n        }),\n        put: (value) => new Promise((resolve, reject) => {\n            db.run(\"UPDATE ItemTable SET value = ? WHERE key = ?\", new Buffer.from(value, \"UTF-8\"), key, (err, res) => {\n                if (err) {\n                    reject(err)\n                } else {\n                    resolve();\n                }\n            })\n        }),\n        close: () => {\n            return new Promise((resolve, reject) => {\n                db.close((err) => {\n                    if (err) reject(err);\n                    else resolve();\n                })\n            })\n        }\n    }\n};\n\nexport default openOneTabDB;\n"]}