{"version":3,"sources":["../src/gist.js"],"names":["Gists","require","DATA_FILE_NAME","META_DATA_NAME","BACKUP_DATAFILE_NAME","SYNC_DATE","Date","now","DATA_VERSION","upload","config","content","gists","token","gist_token","opts","description","public","files","lastsync","version","resolve","reject","create","post","err","res","id","gist_id","conf","save","edit","backup","Error","download","metadata","JSON","parse"],"mappings":";;;;;;;;;;;;;;;;;;AAQA;;;;;;AARA,IAAMA,QAAQC,QAAQ,OAAR,CAAd;;AAEA,IAAMC,iBAAiB,kBAAvB;AACA,IAAMC,iBAAiB,eAAvB;AACA,IAAMC,uBAAuB,yBAA7B;AACA,IAAMC,YAAYC,KAAKC,GAAL,EAAlB;AACA,IAAMC,eAAe,CAArB;;AAIA,IAAMC,SAAS,SAATA,MAAS,CAACC,MAAD,EAASC,OAAT,EAAqB;AAAA;;AAChC,QAAMC,QAAQ,IAAIZ,KAAJ,CAAU,EAACa,OAAOH,OAAOI,UAAf,EAAV,CAAd;AACA,QAAIC,OAAO;AACPC,qBAAa,wBADN;AAEPC,gBAAQ,KAFD;AAGPC,mEACKhB,cADL,EACsB,EAAES,SAASA,OAAX,EADtB,yCAEKR,cAFL,EAEsB,EAAEQ,SAAS,yBAAe,EAACQ,UAAUd,SAAX,EAAsBe,SAASZ,YAA/B,EAAf,CAAX,EAFtB;AAHO,KAAX;;AASA,WAAO,sBAAY,UAACa,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAMC,SAAS,SAATA,MAAS,GAAM;AACjBX,kBAAMY,IAAN,CAAW,QAAX,EAAqBT,IAArB,EAA2B,UAACU,GAAD,EAAMC,GAAN,EAAc;AACrC,oBAAID,GAAJ,EAAS;AACLH,2BAAOG,GAAP;AACH,iBAFD,MAEO,IAAIC,IAAIC,EAAR,EAAY;AACfjB,2BAAOkB,OAAP,GAAiBF,IAAIC,EAArB;AACAjB,2BAAOS,QAAP,GAAkBd,SAAlB;AACAwB,mCAAKC,IAAL,CAAUpB,MAAV;AACAW,4BAAQK,GAAR;AACH;AACJ,aATD;AAUH,SAXD;;AAaA,YAAI,OAAOhB,OAAOkB,OAAd,KAA0B,WAA1B,IAAyClB,OAAOkB,OAAP,IAAkB,EAA/D,EAAmE;AAC/Db,iBAAKY,EAAL,GAAUjB,OAAOkB,OAAjB;AACAhB,kBAAMmB,IAAN,CAAWhB,IAAX,EAAiB,UAACU,GAAD,EAAMC,GAAN,EAAc;AAC3B,oBAAID,GAAJ,EAAS;AACLH,2BAAOG,GAAP;AACH,iBAFD,MAEO,IAAIC,IAAIR,KAAR,EAAe;AAClBR,2BAAOS,QAAP,GAAkBd,SAAlB;AACAwB,mCAAKC,IAAL,CAAUpB,MAAV;AACAW,4BAAQK,GAAR;AACH,iBAJM,MAIA;AACHH;AACH;AACJ,aAVD;AAWH,SAbD,MAaO;AACHA;AACH;AACJ,KA9BM,CAAP;AA+BH,CA1CD;;AA4CA,IAAMS,SAAS,SAATA,MAAS,CAACtB,MAAD,EAASC,OAAT,EAAqB;AAChC,QAAI,OAAOD,OAAOkB,OAAd,KAA0B,WAA1B,IAAyClB,OAAOkB,OAAP,IAAkB,EAA/D,EAAmE;AAC/D,eAAO,kBAAQN,MAAR,CAAe,IAAIW,KAAJ,CAAU,yCAAV,CAAf,CAAP;AACH;;AAED,QAAMrB,QAAQ,IAAIZ,KAAJ,CAAU,EAACa,OAAOH,OAAOI,UAAf,EAAV,CAAd;AACA,QAAIC,OAAO;AACPY,YAAIjB,OAAOkB,OADJ;AAEPV,iDACKd,oBADL,EAC4B,EAAEO,SAASA,OAAX,EAD5B;AAFO,KAAX;AAMA,WAAO,sBAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;AACpCV,cAAMmB,IAAN,CAAWhB,IAAX,EAAiB,UAACU,GAAD,EAAMC,GAAN,EAAc;AAC3B,gBAAIA,OAAOA,IAAIR,KAAf,EAAsB;AAClBG,wBAAQK,GAAR;AACH,aAFD,MAEO;AACHJ,uBAAOG,OAAOC,GAAd;AACH;AACJ,SAND;AAOH,KARM,CAAP;AASH,CArBD;;AAuBA,IAAMQ,WAAW,SAAXA,QAAW,CAACxB,MAAD,EAAY;AACzB,QAAME,QAAQ,IAAIZ,KAAJ,CAAU,EAACa,OAAOH,OAAOI,UAAf,EAAV,CAAd;AACA,WAAO,sBAAY,UAACO,OAAD,EAAUC,MAAV,EAAqB;AACpCV,cAAMsB,QAAN,CAAe,EAACP,IAAIjB,OAAOkB,OAAZ,EAAf,EAAqC,UAACH,GAAD,EAAMC,GAAN,EAAc;AAC/C,gBAAID,GAAJ,EAAS;AACLH,uBAAOG,GAAP;AACH,aAFD,MAEO,IAAIC,IAAIR,KAAJ,IAAaQ,IAAIR,KAAJ,CAAUhB,cAAV,CAAjB,EAA4C;AAC/C,oBAAIS,UAAUe,IAAIR,KAAJ,CAAUhB,cAAV,EAA0BS,OAAxC;AACA,oBAAIwB,WAAWT,IAAIR,KAAJ,CAAUf,cAAV,EAA0BQ,OAA1B,IAAqC,IAApD;AACAU,wBAAQ,CAACV,OAAD,EAAUyB,KAAKC,KAAL,CAAWF,QAAX,CAAV,CAAR;AACH,aAJM,MAIA;AACHb,uBAAOI,GAAP;AACH;AACJ,SAVD;AAWH,KAZM,CAAP;AAaH,CAfD;;kBAiBe;AACXjB,YAAQA,MADG;AAEXyB,cAAUA,QAFC;AAGXF,YAAQA;AAHG,C","file":"gist.js","sourcesContent":["const Gists = require(\"gists\");\n\nconst DATA_FILE_NAME = \"onetab-data.json\";\nconst META_DATA_NAME = \"metadata.json\";\nconst BACKUP_DATAFILE_NAME = \"onetab-data-backup.json\";\nconst SYNC_DATE = Date.now();\nconst DATA_VERSION = 1;\n\nimport conf from \"./conf\";\n\nconst upload = (config, content) => {\n    const gists = new Gists({token: config.gist_token});\n    let opts = {\n        description: \"created by onetab sync\",\n        public: false,\n        files: { \n            [DATA_FILE_NAME]: { content: content },\n            [META_DATA_NAME]: { content: JSON.stringify({lastsync: SYNC_DATE, version: DATA_VERSION }) },\n        }\n    };\n\n    return new Promise((resolve, reject) => {\n        const create = () => {\n            gists.post('/gists', opts, (err, res) => {\n                if (err) {\n                    reject(err);\n                } else if (res.id) {\n                    config.gist_id = res.id;\n                    config.lastsync = SYNC_DATE;\n                    conf.save(config);\n                    resolve(res);\n                }\n            });\n        };\n\n        if (typeof config.gist_id !== \"undefined\" && config.gist_id != \"\") {\n            opts.id = config.gist_id;\n            gists.edit(opts, (err, res) => {\n                if (err) {\n                    reject(err);\n                } else if (res.files) {\n                    config.lastsync = SYNC_DATE;\n                    conf.save(config);\n                    resolve(res);\n                } else {\n                    create();\n                }\n            });\n        } else {\n            create();\n        }\n    });\n};\n\nconst backup = (config, content) => {\n    if (typeof config.gist_id === \"undefined\" || config.gist_id == \"\") {\n        return Promise.reject(new Error(\"failed to backup. gist id is not given.\"))\n    }\n\n    const gists = new Gists({token: config.gist_token});\n    let opts = {\n        id: config.gist_id,\n        files: {\n            [BACKUP_DATAFILE_NAME]: { content: content }\n        },\n    };\n    return new Promise((resolve, reject) => {\n        gists.edit(opts, (err, res) => {\n            if (res && res.files) {\n                resolve(res);\n            } else {\n                reject(err || res);\n            }\n        })\n    });\n}\n\nconst download = (config) => {\n    const gists = new Gists({token: config.gist_token});\n    return new Promise((resolve, reject) => {\n        gists.download({id: config.gist_id}, (err, res) => {\n            if (err) {\n                reject(err);\n            } else if (res.files && res.files[DATA_FILE_NAME]) {\n                let content = res.files[DATA_FILE_NAME].content;\n                let metadata = res.files[META_DATA_NAME].content || \"{}\";\n                resolve([content, JSON.parse(metadata)]);\n            } else {\n                reject(res);\n            }\n        });\n    })\n};\n\nexport default {\n    upload: upload,\n    download: download,\n    backup: backup,\n}\n"]}